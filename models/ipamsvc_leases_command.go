// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcLeasesCommand LeasesCommand
//
// The __LeasesCommand__ (_dhcp/leases_command_) is used to perform an action on a lease or a set of leases defined by the list of IP addresses or Subnet or Range. Host(s) owning the lease(s) must be available for this action to succeed. The command is executed asynchronously.
//
// swagger:model ipamsvcLeasesCommand
type IpamsvcLeasesCommand struct {

	// The list of IP addresses to execute the "command" on. It can be 1 or more IP addresses.
	Address []*IpamsvcLeaseAddress `json:"address"`

	// The command to perform on the lease(s).
	//
	// Valid values are:
	//
	// | command       | description |
	// | :------       | ----------- |
	// | _clear_       | Removes selected lease(s) from the DHCP server(s). This will NOT affect the client that issued the lease. |
	// | _resend-ddns_ | Resends a request to kea-dhcp-ddns to update DNS for selected lease(s). |
	// Required: true
	Command *string `json:"command"`

	// The list of ranges to execute the "command" on. For now it is limited to 1 range.
	Range []*IpamsvcLeaseRange `json:"range"`

	// The list of subnets to execute the "command" on. For now it is limited to 1 subnet.
	Subnet []*IpamsvcLeaseSubnet `json:"subnet"`
}

// Validate validates this ipamsvc leases command
func (m *IpamsvcLeasesCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcLeasesCommand) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	for i := 0; i < len(m.Address); i++ {
		if swag.IsZero(m.Address[i]) { // not required
			continue
		}

		if m.Address[i] != nil {
			if err := m.Address[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpamsvcLeasesCommand) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcLeasesCommand) validateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.Range) { // not required
		return nil
	}

	for i := 0; i < len(m.Range); i++ {
		if swag.IsZero(m.Range[i]) { // not required
			continue
		}

		if m.Range[i] != nil {
			if err := m.Range[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("range" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("range" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpamsvcLeasesCommand) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnet); i++ {
		if swag.IsZero(m.Subnet[i]) { // not required
			continue
		}

		if m.Subnet[i] != nil {
			if err := m.Subnet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ipamsvc leases command based on the context it is used
func (m *IpamsvcLeasesCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcLeasesCommand) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Address); i++ {

		if m.Address[i] != nil {

			if swag.IsZero(m.Address[i]) { // not required
				return nil
			}

			if err := m.Address[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpamsvcLeasesCommand) contextValidateRange(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Range); i++ {

		if m.Range[i] != nil {

			if swag.IsZero(m.Range[i]) { // not required
				return nil
			}

			if err := m.Range[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("range" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("range" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpamsvcLeasesCommand) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subnet); i++ {

		if m.Subnet[i] != nil {

			if swag.IsZero(m.Subnet[i]) { // not required
				return nil
			}

			if err := m.Subnet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcLeasesCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcLeasesCommand) UnmarshalBinary(b []byte) error {
	var res IpamsvcLeasesCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
