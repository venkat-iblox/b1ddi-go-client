// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IpamsvcNameserver ipamsvc nameserver
//
// swagger:model ipamsvcNameserver
type IpamsvcNameserver struct {

	// The Kerberos principal name. It uses the typical Kerberos notation: <SERVICE-NAME>/<server-domain-name>@<REALM>.
	//
	// Defaults to empty.
	ClientPrincipal string `json:"client_principal,omitempty"`

	// The behavior when GSS-TSIG should be used (a matching external DNS server is configured) but no GSS-TSIG key is available.
	// If configured to _false_ (the default) this DNS server is skipped, if configured to _true_ the DNS server is ignored
	// and the DNS update is sent with the configured DHCP-DDNS protection e.g. TSIG key or without any protection when
	// none was configured.
	//
	// Defaults to _false_.
	GssTsigFallback bool `json:"gss_tsig_fallback,omitempty"`

	// Time interval (in seconds) the keys for each configured external DNS server are checked for rekeying,
	// i.e. a new key is created to replace the current usable one when its age is greater than the _kerberos_rekey_interval_ value.
	//
	// Defaults to 120 seconds.
	KerberosRekeyInterval int64 `json:"kerberos_rekey_interval,omitempty"`

	// Time interval (in seconds) to retry to create a key if any error occurred previously for any configured external DNS server.
	//
	// Defaults to 30 seconds.
	KerberosRetryInterval int64 `json:"kerberos_retry_interval,omitempty"`

	// Lifetime (in seconds) of GSS-TSIG keys in the TKEY protocol.
	//
	// Defaults to 160 seconds.
	KerberosTkeyLifetime int64 `json:"kerberos_tkey_lifetime,omitempty"`

	// Determines which protocol is used to establish the security context with the external DNS servers, TCP or UDP.
	//
	// Defaults to _tcp_.
	KerberosTkeyProtocol string `json:"kerberos_tkey_protocol,omitempty"`

	// nameserver
	Nameserver string `json:"nameserver,omitempty"`

	// The Kerberos principal name of this DNS server that will receive updates.
	//
	// Defaults to empty.
	ServerPrincipal string `json:"server_principal,omitempty"`
}

// Validate validates this ipamsvc nameserver
func (m *IpamsvcNameserver) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ipamsvc nameserver based on context it is used
func (m *IpamsvcNameserver) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcNameserver) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcNameserver) UnmarshalBinary(b []byte) error {
	var res IpamsvcNameserver
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
