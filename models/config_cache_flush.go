// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigCacheFlush CacheFlush
//
// The _dns/cache_flush_ API removes entries from the DNS cache on the on-prem host. The command will be forwarded to the on-prem host and executed asynchronously. The on-prem host must be available and running DNS for this to succeed.
//
// swagger:model configCacheFlush
type ConfigCacheFlush struct {

	// Optional. If _true_, all names below the given FQDN will also be removed from cache.
	//
	// Defaults to _true_.
	FlushSubdomains bool `json:"flush_subdomains,omitempty"`

	// Optional. The FQDN to remove.
	//
	// Defaults to '.'
	Fqdn string `json:"fqdn,omitempty"`

	// The host to alter. Either _ophid_ or _service_id_ should be provided.
	Ophid string `json:"ophid,omitempty"`

	// Service Id. Either _ophid_ or _service_id_ should be provided.
	ServiceID string `json:"service_id,omitempty"`

	// Optional. The time in seconds the command is valid for. Command is executed on the onprem host only if it takes less than this time for the command to be transmitted to the host. Otherwise the onprem host discards this command.
	//
	// Defaults to 120 (2 min).
	TTL int64 `json:"ttl,omitempty"`

	// Optional, If provided, flushes the server's cache for a view.
	ViewName string `json:"view_name,omitempty"`
}

// Validate validates this config cache flush
func (m *ConfigCacheFlush) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this config cache flush based on context it is used
func (m *ConfigCacheFlush) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigCacheFlush) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigCacheFlush) UnmarshalBinary(b []byte) error {
	var res ConfigCacheFlush
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
