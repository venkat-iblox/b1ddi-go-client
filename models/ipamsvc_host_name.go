// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcHostName HostName
//
// The __HostName__ object represents a name associated with the __Host__ object.
//
// swagger:model ipamsvcHostName
type IpamsvcHostName struct {

	// When _true_, the name is treated as an alias.
	Alias bool `json:"alias,omitempty"`

	// A name for the host.
	// Required: true
	Name *string `json:"name"`

	// When _true_, the name field is treated as primary name.
	// There must be one and only one primary name in the list of host names.
	// The primary name will be treated as the canonical name for all the aliases.
	// PTR record will be generated only for the primary name.
	PrimaryName bool `json:"primary_name,omitempty"`

	// The resource identifier.
	// Required: true
	Zone *string `json:"zone"`
}

// Validate validates this ipamsvc host name
func (m *IpamsvcHostName) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcHostName) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcHostName) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ipamsvc host name based on context it is used
func (m *IpamsvcHostName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcHostName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcHostName) UnmarshalBinary(b []byte) error {
	var res IpamsvcHostName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
