// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigLBDN LBDN
//
// A LBDN (_dtc/lbdn_) represents a load-balanced domain name
//
// swagger:model configLBDN
type ConfigLBDN struct {

	// Optional. Comment for __LBDN__.
	Comment string `json:"comment,omitempty"`

	// Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
	Disabled bool `json:"disabled,omitempty"`

	// Optional. __DTC Policy__ information.
	DtcPolicy *ConfigDTCPolicy `json:"dtc_policy,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Optional. The inheritance configuration.
	InheritanceSources *ConfigTTLInheritance `json:"inheritance_sources,omitempty"`

	// Name of __LBDN__.
	// Required: true
	Name *string `json:"name"`

	// Optional. Precedence.
	Precedence int64 `json:"precedence,omitempty"`

	// Optional. The tags for __LBDN__ in JSON format.
	Tags interface{} `json:"tags,omitempty"`

	// Optional. Time to live value (in seconds) to be used for records in DTC response.
	// Unsigned integer, min: 0, max 2147483647 (31-bits per RFC-2181).
	TTL int64 `json:"ttl,omitempty"`

	// The resource identifier.
	// Required: true
	View *string `json:"view"`
}

// Validate validates this config l b d n
func (m *ConfigLBDN) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDtcPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInheritanceSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigLBDN) validateDtcPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DtcPolicy) { // not required
		return nil
	}

	if m.DtcPolicy != nil {
		if err := m.DtcPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dtc_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dtc_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigLBDN) validateInheritanceSources(formats strfmt.Registry) error {
	if swag.IsZero(m.InheritanceSources) { // not required
		return nil
	}

	if m.InheritanceSources != nil {
		if err := m.InheritanceSources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inheritance_sources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inheritance_sources")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigLBDN) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ConfigLBDN) validateView(formats strfmt.Registry) error {

	if err := validate.Required("view", "body", m.View); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config l b d n based on the context it is used
func (m *ConfigLBDN) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDtcPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInheritanceSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigLBDN) contextValidateDtcPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.DtcPolicy != nil {

		if swag.IsZero(m.DtcPolicy) { // not required
			return nil
		}

		if err := m.DtcPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dtc_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dtc_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigLBDN) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigLBDN) contextValidateInheritanceSources(ctx context.Context, formats strfmt.Registry) error {

	if m.InheritanceSources != nil {

		if swag.IsZero(m.InheritanceSources) { // not required
			return nil
		}

		if err := m.InheritanceSources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inheritance_sources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inheritance_sources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigLBDN) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigLBDN) UnmarshalBinary(b []byte) error {
	var res ConfigLBDN
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
