// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcDHCPPacketStats DHCPPacketStats
//
// The DHCPPacketStats object represents DHCP packets statistics for a DHCP __Host__.
//
// swagger:model ipamsvcDHCPPacketStats
type IpamsvcDHCPPacketStats struct {

	// The number of DHCP packets received.
	// Read Only: true
	DhcpPktReceived string `json:"dhcp_pkt_received,omitempty"`

	// The number of DHCP V6 packets received.
	// Read Only: true
	DhcpPktReceivedV6 string `json:"dhcp_pkt_received_v6,omitempty"`

	// The number of DHCP packets sent.
	// Read Only: true
	DhcpPktSent string `json:"dhcp_pkt_sent,omitempty"`

	// The number of DHCP V6 packets sent.
	// Read Only: true
	DhcpPktSentV6 string `json:"dhcp_pkt_sent_v6,omitempty"`

	// The number of DHCP requests received.
	// Read Only: true
	DhcpReqReceived string `json:"dhcp_req_received,omitempty"`

	// The number of DHCP V6 requests received.
	// Read Only: true
	DhcpReqReceivedV6 string `json:"dhcp_req_received_v6,omitempty"`
}

// Validate validates this ipamsvc d h c p packet stats
func (m *IpamsvcDHCPPacketStats) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this ipamsvc d h c p packet stats based on the context it is used
func (m *IpamsvcDHCPPacketStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcpPktReceived(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpPktReceivedV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpPktSent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpPktSentV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpReqReceived(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpReqReceivedV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcDHCPPacketStats) contextValidateDhcpPktReceived(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_pkt_received", "body", string(m.DhcpPktReceived)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDHCPPacketStats) contextValidateDhcpPktReceivedV6(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_pkt_received_v6", "body", string(m.DhcpPktReceivedV6)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDHCPPacketStats) contextValidateDhcpPktSent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_pkt_sent", "body", string(m.DhcpPktSent)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDHCPPacketStats) contextValidateDhcpPktSentV6(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_pkt_sent_v6", "body", string(m.DhcpPktSentV6)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDHCPPacketStats) contextValidateDhcpReqReceived(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_req_received", "body", string(m.DhcpReqReceived)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDHCPPacketStats) contextValidateDhcpReqReceivedV6(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_req_received_v6", "body", string(m.DhcpReqReceivedV6)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcDHCPPacketStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcDHCPPacketStats) UnmarshalBinary(b []byte) error {
	var res IpamsvcDHCPPacketStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
