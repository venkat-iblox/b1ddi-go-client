// Code generated by go-swagger; DO NOT EDIT.

package lbdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new lbdn API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lbdn API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LbdnCreate(params *LbdnCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnCreateCreated, error)

	LbdnDelete(params *LbdnDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnDeleteNoContent, error)

	LbdnList(params *LbdnListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnListOK, error)

	LbdnRead(params *LbdnReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnReadOK, error)

	LbdnUpdate(params *LbdnUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
LbdnCreate creates the l b d n object

Use this method to create a __LBDN__ object.
*/
func (a *Client) LbdnCreate(params *LbdnCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLbdnCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lbdnCreate",
		Method:             "POST",
		PathPattern:        "/dtc/lbdn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LbdnCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LbdnCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lbdnCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LbdnDelete deletes the l b d n object

Use this method to delete a __LBDN__ object.
*/
func (a *Client) LbdnDelete(params *LbdnDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLbdnDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lbdnDelete",
		Method:             "DELETE",
		PathPattern:        "/dtc/lbdn/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LbdnDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LbdnDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lbdnDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LbdnList lists l b d n objects

Use this method to list __LBDN__ objects.
*/
func (a *Client) LbdnList(params *LbdnListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLbdnListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lbdnList",
		Method:             "GET",
		PathPattern:        "/dtc/lbdn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LbdnListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LbdnListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lbdnList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LbdnRead reads the l b d n object

Use this method to read a __LBDN__ object.
*/
func (a *Client) LbdnRead(params *LbdnReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLbdnReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lbdnRead",
		Method:             "GET",
		PathPattern:        "/dtc/lbdn/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LbdnReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LbdnReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lbdnRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LbdnUpdate updates the l b d n object

Use this method to update a __LBDN__ object.
*/
func (a *Client) LbdnUpdate(params *LbdnUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LbdnUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLbdnUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lbdnUpdate",
		Method:             "PATCH",
		PathPattern:        "/dtc/lbdn/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LbdnUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LbdnUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lbdnUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
